spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      routes:
        # 路由到 user-service
        - id: user-service
          uri: lb://user-service  # 通过负载均衡调用 user-service
          predicates:
            - Path=/users/**
          filters:
            - name: CircuitBreaker
              args:
                name: userServiceCircuitBreaker
                fallbackUri: forward:/fallback/user-service
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY, GATEWAY_TIMEOUT, SERVICE_UNAVAILABLE
            - name: AddResponseHeader
              args:
                name: Cache-Control
                value: no-cache, no-store, must-revalidate

        # 路由到 stub-service
        - id: stub-service
          uri: lb://stub-service  # 通过负载均衡调用 stub-service
          predicates:
            - Path=/stubs/**
          filters:
            - name: CircuitBreaker
              args:
                name: stubServiceCircuitBreaker
                fallbackUri: forward:/fallback/stub-service
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY, GATEWAY_TIMEOUT, SERVICE_UNAVAILABLE
            - name: AddResponseHeader
              args:
                name: Cache-Control
                value: no-cache, no-store, must-revalidate
      # Default filters for all routes
      default-filters:
        - DedupeResponseHeader=Vary Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_UNIQUE

      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "http://154.23.243.155"  # 仅允许生产环境的域名
            allowedHeaders: "*"
            allowedMethods: "*"
            allowCredentials: true
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true


  data:
    redis:
      host: localhost  # Redis 用于限流、Session 共享
      port: 6379
      password: redis_y3yDJk

server:
  port: 1080
  tomcat:
    threads:
      max: 100  # 增加 Tomcat 线程池大小，适应生产流量

  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json
    min-response-size: 1024

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: health,info,metrics  # 开放健康检查和指标监控
  server:
    port: 9090  # 管理端口
  prometheus:
    metrics:
      export:
        enabled: true
logging:
  level:
    root: WARN  # 生产环境中减少日志输出，减少 IO 开销
    org.springframework.cloud.gateway: DEBUG
    io.github.resilience4j: DEBUG
  file:
    name: logs/config-service.log
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 30
      clean-history-on-start: false
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/  # 使用服务发现
  instance:
    preferIpAddress: true
    lease-renewal-interval-in-seconds: 10  # 服务注册续约频率
    lease-expiration-duration-in-seconds: 30  # 服务过期时间
#    metadata-map:
#      instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}}

resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
    instances:
      userServiceCircuitBreaker:
        baseConfig: default


some:
  config:
    value: refresh !